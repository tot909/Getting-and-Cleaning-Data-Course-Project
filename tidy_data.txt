# Load necessary packages
library(dplyr)

# Set working directory to where the UCI HAR Dataset was unzipped
setwd("path/to/UCI HAR Dataset")  # Update the path

# Read activity labels and features
activity_labels <- read.table("activity_labels.txt", col.names = c("activityId", "activityType"))
features <- read.table("features.txt", col.names = c("featureId", "featureName"))

# Read training data
subject_train <- read.table("train/subject_train.txt", col.names = "subjectId")
x_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt", col.names = "activityId")

# Read test data
subject_test <- read.table("test/subject_test.txt", col.names = "subjectId")
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt", col.names = "activityId")

# Merge training and test data
x_data <- rbind(x_train, x_test)
y_data <- rbind(y_train, y_test)
subject_data <- rbind(subject_train, subject_test)

# Extract only measurements on the mean and standard deviation
features_mean_std <- grep("-(mean|std)\\(\\)", features$featureName)
x_data_mean_std <- x_data[, features_mean_std]
names(x_data_mean_std) <- features[features_mean_std, 2]

# Combine data
all_data <- cbind(subject_data, y_data, x_data_mean_std)

# Use descriptive activity names
all_data$activityId <- factor(all_data$activityId, levels = activity_labels$activityId, labels = activity_labels$activityType)

# Label data set with descriptive variable names
names(all_data)[2] <- "activityType"
names(all_data) <- gsub("^t", "time", names(all_data))
names(all_data) <- gsub("^f", "frequency", names(all_data))
names(all_data) <- gsub("Acc", "Accelerometer", names(all_data))
names(all_data) <- gsub("Gyro", "Gyroscope", names(all_data))
names(all_data) <- gsub("Mag", "Magnitude", names(all_data))
names(all_data) <- gsub("BodyBody", "Body", names(all_data))

# Create a second tidy data set with the average of each variable for each activity and each subject
tidy_data <- all_data %>%
  group_by(subjectId, activityType) %>%
  summarise_all(funs(mean))

# Write the tidy data set to a file
write.table(tidy_data, "tidy_data.txt", row.name = FALSE)

